name: Deploy to EC2 with ECR
on:
  push:
    branches: ["dev"]

env:
  AWS_REGION: ap-northeast-2        # AWS 리전
  ECR_REPOSITORY: ottermeet        # ECR 저장소 이름
  EC2_HOST: 43.200.54.163          # EC2 퍼블릭 IP
  EC2_USER: "wemeetnowmatching"    # EC2 사용자 이름(인스턴스 이름)
  APP_DIR: "~/app"                 # 애플리케이션 파일 저장 경로
  IMAGE_TAG: ${{ github.sha }}     # 이미지 태그 (커밋 해시 사용)

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Build project with Gradle
        run: ./gradlew clean bootJar
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CLOUD_AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CLOUD_AWS_S3_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # 로그인 단계의 출력값을 참조
        run: |
          # Docker 이미지 빌드 및 ECR 푸시
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          # EC2에서 Docker 실행
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << EOF
            # Docker 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 기존 컨테이너 종료 및 삭제
            docker ps -q --filter "name=wemeetnow_container" | xargs -r docker stop | xargs -r docker rm
            
            # 최신 이미지 Pull
            docker pull ${{ steps.build-image.outputs.image }}
            
            # 컨테이너 실행
            docker run -d --name wemeetnow_container -p 8080:8080 ${{ steps.build-image.outputs.image }}
          EOF
