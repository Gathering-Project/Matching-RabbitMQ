name: Deploy to EC2 with ECR
on:
  push:
    branches: [ "dev" ]
    
env:
  AWS_REGION: ap-northeast-2                  # AWS 리전
  ECR_REPOSITORY: ottermeet               # ECR 저장소 이름
  EC2_HOST: "43.200.54.163"              # EC2 퍼블릭 IP
  EC2_USER: "wemeetnowmatching"                        # EC2 사용자 이름(인스턴스 이름)
  APP_DIR: "~/app"                            # 애플리케이션 파일 저장 경로
  IMAGE_TAG: ${{ github.sha }}                # 이미지 태그 (커밋 해시 사용)
permissions:
  contents: read
  
jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build project with Gradle
      run: ./gradlew clean bootJar
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.CLOUD_AWS_S3_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.CLOUD_AWS_S3_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Docker 이미지 빌드 및 ECR 푸시
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << EOF
          set -e  # 오류 발생 시 즉시 종료
          # 권한 설정
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/authorized_keys
          # Docker 및 AWS CLI 설치 확인
          if ! command -v docker &> /dev/null; then
            echo "Docker가 설치되어 있지 않습니다. 설치를 진행합니다."
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -aG docker $(whoami)
          fi
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI가 설치되어 있지 않습니다. 설치를 진행합니다."
            curl "https://awscli.amazonaws.com/aws-cli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          # Docker 로그인
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          # 기존 컨테이너 종료 및 삭제
          docker ps -q | grep -q . && docker stop \$(docker ps -q) && docker rm \$(docker ps -aq) || true
          # 최신 이미지 Pull
          docker pull ${{ steps.build-image.outputs.image }}
          # 이미지 실행
          docker run -d -p 8080:8080 ${{ steps.build-image.outputs.image }}
          echo "배포 완료: 이미지를 EC2에서 실행 중입니다."
        EOF
